---
// Optimized image component with graceful fallback handling
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
  sizes?: string;
  useWebP?: boolean;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy', 
  fetchpriority = 'auto',
  class: className = '',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 600px',
  useWebP = false // Only use WebP if explicitly enabled and files exist
} = Astro.props;

// Generate srcset for responsive images with proper fallbacks
const generateSrcset = (baseSrc: string) => {
  // Only generate srcset if we're dealing with local images
  if (!baseSrc.startsWith('/') && !baseSrc.startsWith('./')) {
    return baseSrc;
  }
  
  const responsiveSizes = [320, 640, 768, 1024, 1280];
  // For now, just return the original source
  // In production, this would connect to an image optimization service
  return baseSrc;
};

// Check if WebP version exists (only for local images)
const webpSrc = useWebP && src.match(/\.(jpg|jpeg|png)$/i) 
  ? src.replace(/\.(jpg|jpeg|png)$/i, '.webp')
  : null;
---

<picture>
  {webpSrc && (
    <source
      type="image/webp"
      srcset={webpSrc}
      sizes={sizes}
    />
  )}
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    fetchpriority={fetchpriority}
    class={className}
    decoding="async"
  />
</picture>

<style>
  picture {
    display: block;
    width: 100%;
    height: auto;
  }
  
  img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }
</style>