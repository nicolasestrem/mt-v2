# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  hero(relativePath: String): Hero!
  heroConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeroFilter): HeroConnection!
  mission(relativePath: String): Mission!
  missionConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MissionFilter): MissionConnection!
  jury(relativePath: String): Jury!
  juryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: JuryFilter): JuryConnection!
  criteria(relativePath: String): Criteria!
  criteriaConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CriteriaFilter): CriteriaConnection!
  partners(relativePath: String): Partners!
  partnersConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PartnersFilter): PartnersConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  hero: HeroFilter
  mission: MissionFilter
  jury: JuryFilter
  criteria: CriteriaFilter
  partners: PartnersFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Hero | Mission | Jury | Criteria | Partners | Settings | Folder

type Hero implements Node & Document {
  title: String!
  subtitle: String!
  eventDate: String!
  buttonText: String!
  buttonLink: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input HeroFilter {
  title: StringFilter
  subtitle: StringFilter
  eventDate: DatetimeFilter
  buttonText: StringFilter
  buttonLink: StringFilter
}

type HeroConnectionEdges {
  cursor: String!
  node: Hero
}

type HeroConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeroConnectionEdges]
}

type MissionCriteria {
  text: String!
}

type Mission implements Node & Document {
  prefix: String!
  title: String!
  description: JSON!
  criteriaTitle: String!
  criteria: [MissionCriteria]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input MissionCriteriaFilter {
  text: StringFilter
}

input MissionFilter {
  prefix: StringFilter
  title: StringFilter
  description: RichTextFilter
  criteriaTitle: StringFilter
  criteria: MissionCriteriaFilter
}

type MissionConnectionEdges {
  cursor: String!
  node: Mission
}

type MissionConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MissionConnectionEdges]
}

type Jury implements Node & Document {
  name: String!
  title: String!
  organization: String!
  image: String!
  bio: JSON!
  linkedin: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input JuryFilter {
  name: StringFilter
  title: StringFilter
  organization: StringFilter
  image: ImageFilter
  bio: RichTextFilter
  linkedin: StringFilter
}

type JuryConnectionEdges {
  cursor: String!
  node: Jury
}

type JuryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [JuryConnectionEdges]
}

type Criteria implements Node & Document {
  title: String!
  icon: String!
  description: JSON!
  order: Float!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input CriteriaFilter {
  title: StringFilter
  icon: StringFilter
  description: RichTextFilter
  order: NumberFilter
}

type CriteriaConnectionEdges {
  cursor: String!
  node: Criteria
}

type CriteriaConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CriteriaConnectionEdges]
}

type Partners implements Node & Document {
  name: String!
  description: String!
  logo: String!
  website: String
  type: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PartnersFilter {
  name: StringFilter
  description: StringFilter
  logo: ImageFilter
  website: StringFilter
  type: StringFilter
}

type PartnersConnectionEdges {
  cursor: String!
  node: Partners
}

type PartnersConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PartnersConnectionEdges]
}

type SettingsFooterLinks {
  label: String
  url: String
}

type SettingsFooter {
  copyright: String
  links: [SettingsFooterLinks]
}

type Settings implements Node & Document {
  web3formsKey: String
  linkedinFeedUrl: String
  footer: SettingsFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsFooterLinksFilter {
  label: StringFilter
  url: StringFilter
}

input SettingsFooterFilter {
  copyright: StringFilter
  links: SettingsFooterLinksFilter
}

input SettingsFilter {
  web3formsKey: StringFilter
  linkedinFeedUrl: StringFilter
  footer: SettingsFooterFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHero(relativePath: String!, params: HeroMutation!): Hero!
  createHero(relativePath: String!, params: HeroMutation!): Hero!
  updateMission(relativePath: String!, params: MissionMutation!): Mission!
  createMission(relativePath: String!, params: MissionMutation!): Mission!
  updateJury(relativePath: String!, params: JuryMutation!): Jury!
  createJury(relativePath: String!, params: JuryMutation!): Jury!
  updateCriteria(relativePath: String!, params: CriteriaMutation!): Criteria!
  createCriteria(relativePath: String!, params: CriteriaMutation!): Criteria!
  updatePartners(relativePath: String!, params: PartnersMutation!): Partners!
  createPartners(relativePath: String!, params: PartnersMutation!): Partners!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  hero: HeroMutation
  mission: MissionMutation
  jury: JuryMutation
  criteria: CriteriaMutation
  partners: PartnersMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  hero: HeroMutation
  mission: MissionMutation
  jury: JuryMutation
  criteria: CriteriaMutation
  partners: PartnersMutation
  settings: SettingsMutation
}

input HeroMutation {
  title: String
  subtitle: String
  eventDate: String
  buttonText: String
  buttonLink: String
}

input MissionCriteriaMutation {
  text: String
}

input MissionMutation {
  prefix: String
  title: String
  description: JSON
  criteriaTitle: String
  criteria: [MissionCriteriaMutation]
}

input JuryMutation {
  name: String
  title: String
  organization: String
  image: String
  bio: JSON
  linkedin: String
}

input CriteriaMutation {
  title: String
  icon: String
  description: JSON
  order: Float
}

input PartnersMutation {
  name: String
  description: String
  logo: String
  website: String
  type: String
}

input SettingsFooterLinksMutation {
  label: String
  url: String
}

input SettingsFooterMutation {
  copyright: String
  links: [SettingsFooterLinksMutation]
}

input SettingsMutation {
  web3formsKey: String
  linkedinFeedUrl: String
  footer: SettingsFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
