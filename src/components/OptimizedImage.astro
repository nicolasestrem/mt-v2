---
// Optimized image component with multiple formats and sizes
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy', 
  fetchpriority = 'auto',
  class: className = '' 
} = Astro.props;

// Generate srcset for responsive images
const generateSrcset = (baseSrc: string) => {
  const sizes = [320, 640, 768, 1024, 1280];
  return sizes.map(size => `${baseSrc}?w=${size} ${size}w`).join(', ');
};
---

<picture>
  <source
    type="image/webp"
    srcset={generateSrcset(src.replace(/\.(jpg|jpeg|png)$/i, '.webp'))}
    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 600px"
  />
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    fetchpriority={fetchpriority}
    class={className}
    decoding="async"
  />
</picture>

<style>
  picture {
    display: block;
    width: 100%;
    height: auto;
  }
  
  img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }
</style>