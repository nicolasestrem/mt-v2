//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  hero: Hero;
  heroConnection: HeroConnection;
  mission: Mission;
  missionConnection: MissionConnection;
  jury: Jury;
  juryConnection: JuryConnection;
  criteria: Criteria;
  criteriaConnection: CriteriaConnection;
  partners: Partners;
  partnersConnection: PartnersConnection;
  settings: Settings;
  settingsConnection: SettingsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeroArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeroConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeroFilter>;
};


export type QueryMissionArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMissionConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MissionFilter>;
};


export type QueryJuryArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryJuryConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JuryFilter>;
};


export type QueryCriteriaArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCriteriaConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CriteriaFilter>;
};


export type QueryPartnersArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPartnersConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PartnersFilter>;
};


export type QuerySettingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySettingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
};

export type DocumentFilter = {
  hero?: InputMaybe<HeroFilter>;
  mission?: InputMaybe<MissionFilter>;
  jury?: InputMaybe<JuryFilter>;
  criteria?: InputMaybe<CriteriaFilter>;
  partners?: InputMaybe<PartnersFilter>;
  settings?: InputMaybe<SettingsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Hero | Mission | Jury | Criteria | Partners | Settings | Folder;

export type Hero = Node & Document & {
  __typename?: 'Hero';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  eventDate: Scalars['String']['output'];
  buttonText: Scalars['String']['output'];
  buttonLink: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HeroFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  eventDate?: InputMaybe<DatetimeFilter>;
  buttonText?: InputMaybe<StringFilter>;
  buttonLink?: InputMaybe<StringFilter>;
};

export type HeroConnectionEdges = {
  __typename?: 'HeroConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Hero>;
};

export type HeroConnection = Connection & {
  __typename?: 'HeroConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HeroConnectionEdges>>>;
};

export type MissionCriteria = {
  __typename?: 'MissionCriteria';
  text: Scalars['String']['output'];
};

export type Mission = Node & Document & {
  __typename?: 'Mission';
  prefix: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  criteriaTitle: Scalars['String']['output'];
  criteria?: Maybe<Array<Maybe<MissionCriteria>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MissionCriteriaFilter = {
  text?: InputMaybe<StringFilter>;
};

export type MissionFilter = {
  prefix?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  criteriaTitle?: InputMaybe<StringFilter>;
  criteria?: InputMaybe<MissionCriteriaFilter>;
};

export type MissionConnectionEdges = {
  __typename?: 'MissionConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Mission>;
};

export type MissionConnection = Connection & {
  __typename?: 'MissionConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MissionConnectionEdges>>>;
};

export type Jury = Node & Document & {
  __typename?: 'Jury';
  name: Scalars['String']['output'];
  title: Scalars['String']['output'];
  organization: Scalars['String']['output'];
  image: Scalars['String']['output'];
  bio: Scalars['JSON']['output'];
  linkedin?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type JuryFilter = {
  name?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  organization?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  bio?: InputMaybe<RichTextFilter>;
  linkedin?: InputMaybe<StringFilter>;
};

export type JuryConnectionEdges = {
  __typename?: 'JuryConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Jury>;
};

export type JuryConnection = Connection & {
  __typename?: 'JuryConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<JuryConnectionEdges>>>;
};

export type Criteria = Node & Document & {
  __typename?: 'Criteria';
  title: Scalars['String']['output'];
  icon: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  order: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type CriteriaFilter = {
  title?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  order?: InputMaybe<NumberFilter>;
};

export type CriteriaConnectionEdges = {
  __typename?: 'CriteriaConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Criteria>;
};

export type CriteriaConnection = Connection & {
  __typename?: 'CriteriaConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CriteriaConnectionEdges>>>;
};

export type Partners = Node & Document & {
  __typename?: 'Partners';
  name: Scalars['String']['output'];
  description: Scalars['String']['output'];
  logo: Scalars['String']['output'];
  website?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PartnersFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  website?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
};

export type PartnersConnectionEdges = {
  __typename?: 'PartnersConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Partners>;
};

export type PartnersConnection = Connection & {
  __typename?: 'PartnersConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PartnersConnectionEdges>>>;
};

export type SettingsFooterLinks = {
  __typename?: 'SettingsFooterLinks';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type SettingsFooter = {
  __typename?: 'SettingsFooter';
  copyright?: Maybe<Scalars['String']['output']>;
  links?: Maybe<Array<Maybe<SettingsFooterLinks>>>;
};

export type Settings = Node & Document & {
  __typename?: 'Settings';
  web3formsKey?: Maybe<Scalars['String']['output']>;
  linkedinFeedUrl?: Maybe<Scalars['String']['output']>;
  footer?: Maybe<SettingsFooter>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SettingsFooterLinksFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type SettingsFooterFilter = {
  copyright?: InputMaybe<StringFilter>;
  links?: InputMaybe<SettingsFooterLinksFilter>;
};

export type SettingsFilter = {
  web3formsKey?: InputMaybe<StringFilter>;
  linkedinFeedUrl?: InputMaybe<StringFilter>;
  footer?: InputMaybe<SettingsFooterFilter>;
};

export type SettingsConnectionEdges = {
  __typename?: 'SettingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Settings>;
};

export type SettingsConnection = Connection & {
  __typename?: 'SettingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SettingsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateHero: Hero;
  createHero: Hero;
  updateMission: Mission;
  createMission: Mission;
  updateJury: Jury;
  createJury: Jury;
  updateCriteria: Criteria;
  createCriteria: Criteria;
  updatePartners: Partners;
  createPartners: Partners;
  updateSettings: Settings;
  createSettings: Settings;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateHeroArgs = {
  relativePath: Scalars['String']['input'];
  params: HeroMutation;
};


export type MutationCreateHeroArgs = {
  relativePath: Scalars['String']['input'];
  params: HeroMutation;
};


export type MutationUpdateMissionArgs = {
  relativePath: Scalars['String']['input'];
  params: MissionMutation;
};


export type MutationCreateMissionArgs = {
  relativePath: Scalars['String']['input'];
  params: MissionMutation;
};


export type MutationUpdateJuryArgs = {
  relativePath: Scalars['String']['input'];
  params: JuryMutation;
};


export type MutationCreateJuryArgs = {
  relativePath: Scalars['String']['input'];
  params: JuryMutation;
};


export type MutationUpdateCriteriaArgs = {
  relativePath: Scalars['String']['input'];
  params: CriteriaMutation;
};


export type MutationCreateCriteriaArgs = {
  relativePath: Scalars['String']['input'];
  params: CriteriaMutation;
};


export type MutationUpdatePartnersArgs = {
  relativePath: Scalars['String']['input'];
  params: PartnersMutation;
};


export type MutationCreatePartnersArgs = {
  relativePath: Scalars['String']['input'];
  params: PartnersMutation;
};


export type MutationUpdateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};


export type MutationCreateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};

export type DocumentUpdateMutation = {
  hero?: InputMaybe<HeroMutation>;
  mission?: InputMaybe<MissionMutation>;
  jury?: InputMaybe<JuryMutation>;
  criteria?: InputMaybe<CriteriaMutation>;
  partners?: InputMaybe<PartnersMutation>;
  settings?: InputMaybe<SettingsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  hero?: InputMaybe<HeroMutation>;
  mission?: InputMaybe<MissionMutation>;
  jury?: InputMaybe<JuryMutation>;
  criteria?: InputMaybe<CriteriaMutation>;
  partners?: InputMaybe<PartnersMutation>;
  settings?: InputMaybe<SettingsMutation>;
};

export type HeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  eventDate?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  buttonLink?: InputMaybe<Scalars['String']['input']>;
};

export type MissionCriteriaMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
};

export type MissionMutation = {
  prefix?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  criteriaTitle?: InputMaybe<Scalars['String']['input']>;
  criteria?: InputMaybe<Array<InputMaybe<MissionCriteriaMutation>>>;
};

export type JuryMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  organization?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['JSON']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
};

export type CriteriaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  order?: InputMaybe<Scalars['Float']['input']>;
};

export type PartnersMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsFooterLinksMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsFooterMutation = {
  copyright?: InputMaybe<Scalars['String']['input']>;
  links?: InputMaybe<Array<InputMaybe<SettingsFooterLinksMutation>>>;
};

export type SettingsMutation = {
  web3formsKey?: InputMaybe<Scalars['String']['input']>;
  linkedinFeedUrl?: InputMaybe<Scalars['String']['input']>;
  footer?: InputMaybe<SettingsFooterMutation>;
};

export type HeroPartsFragment = { __typename: 'Hero', title: string, subtitle: string, eventDate: string, buttonText: string, buttonLink: string };

export type MissionPartsFragment = { __typename: 'Mission', prefix: string, title: string, description: any, criteriaTitle: string, criteria?: Array<{ __typename: 'MissionCriteria', text: string } | null> | null };

export type JuryPartsFragment = { __typename: 'Jury', name: string, title: string, organization: string, image: string, bio: any, linkedin?: string | null };

export type CriteriaPartsFragment = { __typename: 'Criteria', title: string, icon: string, description: any, order: number };

export type PartnersPartsFragment = { __typename: 'Partners', name: string, description: string, logo: string, website?: string | null, type: string };

export type SettingsPartsFragment = { __typename: 'Settings', web3formsKey?: string | null, linkedinFeedUrl?: string | null, footer?: { __typename: 'SettingsFooter', copyright?: string | null, links?: Array<{ __typename: 'SettingsFooterLinks', label?: string | null, url?: string | null } | null> | null } | null };

export type HeroQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HeroQuery = { __typename?: 'Query', hero: { __typename: 'Hero', id: string, title: string, subtitle: string, eventDate: string, buttonText: string, buttonLink: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type HeroConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeroFilter>;
}>;


export type HeroConnectionQuery = { __typename?: 'Query', heroConnection: { __typename?: 'HeroConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HeroConnectionEdges', cursor: string, node?: { __typename: 'Hero', id: string, title: string, subtitle: string, eventDate: string, buttonText: string, buttonLink: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MissionQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MissionQuery = { __typename?: 'Query', mission: { __typename: 'Mission', id: string, prefix: string, title: string, description: any, criteriaTitle: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, criteria?: Array<{ __typename: 'MissionCriteria', text: string } | null> | null } };

export type MissionConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MissionFilter>;
}>;


export type MissionConnectionQuery = { __typename?: 'Query', missionConnection: { __typename?: 'MissionConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MissionConnectionEdges', cursor: string, node?: { __typename: 'Mission', id: string, prefix: string, title: string, description: any, criteriaTitle: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, criteria?: Array<{ __typename: 'MissionCriteria', text: string } | null> | null } | null } | null> | null } };

export type JuryQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type JuryQuery = { __typename?: 'Query', jury: { __typename: 'Jury', id: string, name: string, title: string, organization: string, image: string, bio: any, linkedin?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type JuryConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JuryFilter>;
}>;


export type JuryConnectionQuery = { __typename?: 'Query', juryConnection: { __typename?: 'JuryConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'JuryConnectionEdges', cursor: string, node?: { __typename: 'Jury', id: string, name: string, title: string, organization: string, image: string, bio: any, linkedin?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type CriteriaQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CriteriaQuery = { __typename?: 'Query', criteria: { __typename: 'Criteria', id: string, title: string, icon: string, description: any, order: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type CriteriaConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CriteriaFilter>;
}>;


export type CriteriaConnectionQuery = { __typename?: 'Query', criteriaConnection: { __typename?: 'CriteriaConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CriteriaConnectionEdges', cursor: string, node?: { __typename: 'Criteria', id: string, title: string, icon: string, description: any, order: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PartnersQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PartnersQuery = { __typename?: 'Query', partners: { __typename: 'Partners', id: string, name: string, description: string, logo: string, website?: string | null, type: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PartnersConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PartnersFilter>;
}>;


export type PartnersConnectionQuery = { __typename?: 'Query', partnersConnection: { __typename?: 'PartnersConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PartnersConnectionEdges', cursor: string, node?: { __typename: 'Partners', id: string, name: string, description: string, logo: string, website?: string | null, type: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type SettingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename: 'Settings', id: string, web3formsKey?: string | null, linkedinFeedUrl?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, footer?: { __typename: 'SettingsFooter', copyright?: string | null, links?: Array<{ __typename: 'SettingsFooterLinks', label?: string | null, url?: string | null } | null> | null } | null } };

export type SettingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
}>;


export type SettingsConnectionQuery = { __typename?: 'Query', settingsConnection: { __typename?: 'SettingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SettingsConnectionEdges', cursor: string, node?: { __typename: 'Settings', id: string, web3formsKey?: string | null, linkedinFeedUrl?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, footer?: { __typename: 'SettingsFooter', copyright?: string | null, links?: Array<{ __typename: 'SettingsFooterLinks', label?: string | null, url?: string | null } | null> | null } | null } | null } | null> | null } };

export const HeroPartsFragmentDoc = gql`
    fragment HeroParts on Hero {
  __typename
  title
  subtitle
  eventDate
  buttonText
  buttonLink
}
    `;
export const MissionPartsFragmentDoc = gql`
    fragment MissionParts on Mission {
  __typename
  prefix
  title
  description
  criteriaTitle
  criteria {
    __typename
    text
  }
}
    `;
export const JuryPartsFragmentDoc = gql`
    fragment JuryParts on Jury {
  __typename
  name
  title
  organization
  image
  bio
  linkedin
}
    `;
export const CriteriaPartsFragmentDoc = gql`
    fragment CriteriaParts on Criteria {
  __typename
  title
  icon
  description
  order
}
    `;
export const PartnersPartsFragmentDoc = gql`
    fragment PartnersParts on Partners {
  __typename
  name
  description
  logo
  website
  type
}
    `;
export const SettingsPartsFragmentDoc = gql`
    fragment SettingsParts on Settings {
  __typename
  web3formsKey
  linkedinFeedUrl
  footer {
    __typename
    copyright
    links {
      __typename
      label
      url
    }
  }
}
    `;
export const HeroDocument = gql`
    query hero($relativePath: String!) {
  hero(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HeroParts
  }
}
    ${HeroPartsFragmentDoc}`;
export const HeroConnectionDocument = gql`
    query heroConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HeroFilter) {
  heroConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HeroParts
      }
    }
  }
}
    ${HeroPartsFragmentDoc}`;
export const MissionDocument = gql`
    query mission($relativePath: String!) {
  mission(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MissionParts
  }
}
    ${MissionPartsFragmentDoc}`;
export const MissionConnectionDocument = gql`
    query missionConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MissionFilter) {
  missionConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MissionParts
      }
    }
  }
}
    ${MissionPartsFragmentDoc}`;
export const JuryDocument = gql`
    query jury($relativePath: String!) {
  jury(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...JuryParts
  }
}
    ${JuryPartsFragmentDoc}`;
export const JuryConnectionDocument = gql`
    query juryConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: JuryFilter) {
  juryConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...JuryParts
      }
    }
  }
}
    ${JuryPartsFragmentDoc}`;
export const CriteriaDocument = gql`
    query criteria($relativePath: String!) {
  criteria(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CriteriaParts
  }
}
    ${CriteriaPartsFragmentDoc}`;
export const CriteriaConnectionDocument = gql`
    query criteriaConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CriteriaFilter) {
  criteriaConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CriteriaParts
      }
    }
  }
}
    ${CriteriaPartsFragmentDoc}`;
export const PartnersDocument = gql`
    query partners($relativePath: String!) {
  partners(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PartnersParts
  }
}
    ${PartnersPartsFragmentDoc}`;
export const PartnersConnectionDocument = gql`
    query partnersConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PartnersFilter) {
  partnersConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PartnersParts
      }
    }
  }
}
    ${PartnersPartsFragmentDoc}`;
export const SettingsDocument = gql`
    query settings($relativePath: String!) {
  settings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SettingsParts
  }
}
    ${SettingsPartsFragmentDoc}`;
export const SettingsConnectionDocument = gql`
    query settingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SettingsFilter) {
  settingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SettingsParts
      }
    }
  }
}
    ${SettingsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      hero(variables: HeroQueryVariables, options?: C): Promise<{data: HeroQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroQueryVariables, query: string}> {
        return requester<{data: HeroQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroQueryVariables, query: string}, HeroQueryVariables>(HeroDocument, variables, options);
      },
    heroConnection(variables?: HeroConnectionQueryVariables, options?: C): Promise<{data: HeroConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroConnectionQueryVariables, query: string}> {
        return requester<{data: HeroConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroConnectionQueryVariables, query: string}, HeroConnectionQueryVariables>(HeroConnectionDocument, variables, options);
      },
    mission(variables: MissionQueryVariables, options?: C): Promise<{data: MissionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionQueryVariables, query: string}> {
        return requester<{data: MissionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionQueryVariables, query: string}, MissionQueryVariables>(MissionDocument, variables, options);
      },
    missionConnection(variables?: MissionConnectionQueryVariables, options?: C): Promise<{data: MissionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionConnectionQueryVariables, query: string}> {
        return requester<{data: MissionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionConnectionQueryVariables, query: string}, MissionConnectionQueryVariables>(MissionConnectionDocument, variables, options);
      },
    jury(variables: JuryQueryVariables, options?: C): Promise<{data: JuryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JuryQueryVariables, query: string}> {
        return requester<{data: JuryQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JuryQueryVariables, query: string}, JuryQueryVariables>(JuryDocument, variables, options);
      },
    juryConnection(variables?: JuryConnectionQueryVariables, options?: C): Promise<{data: JuryConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JuryConnectionQueryVariables, query: string}> {
        return requester<{data: JuryConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JuryConnectionQueryVariables, query: string}, JuryConnectionQueryVariables>(JuryConnectionDocument, variables, options);
      },
    criteria(variables: CriteriaQueryVariables, options?: C): Promise<{data: CriteriaQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CriteriaQueryVariables, query: string}> {
        return requester<{data: CriteriaQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CriteriaQueryVariables, query: string}, CriteriaQueryVariables>(CriteriaDocument, variables, options);
      },
    criteriaConnection(variables?: CriteriaConnectionQueryVariables, options?: C): Promise<{data: CriteriaConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CriteriaConnectionQueryVariables, query: string}> {
        return requester<{data: CriteriaConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CriteriaConnectionQueryVariables, query: string}, CriteriaConnectionQueryVariables>(CriteriaConnectionDocument, variables, options);
      },
    partners(variables: PartnersQueryVariables, options?: C): Promise<{data: PartnersQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PartnersQueryVariables, query: string}> {
        return requester<{data: PartnersQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PartnersQueryVariables, query: string}, PartnersQueryVariables>(PartnersDocument, variables, options);
      },
    partnersConnection(variables?: PartnersConnectionQueryVariables, options?: C): Promise<{data: PartnersConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PartnersConnectionQueryVariables, query: string}> {
        return requester<{data: PartnersConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PartnersConnectionQueryVariables, query: string}, PartnersConnectionQueryVariables>(PartnersConnectionDocument, variables, options);
      },
    settings(variables: SettingsQueryVariables, options?: C): Promise<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}> {
        return requester<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}, SettingsQueryVariables>(SettingsDocument, variables, options);
      },
    settingsConnection(variables?: SettingsConnectionQueryVariables, options?: C): Promise<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}> {
        return requester<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}, SettingsConnectionQueryVariables>(SettingsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  