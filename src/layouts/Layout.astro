---
/**
 * The main layout component for all pages.
 * It sets up the basic HTML structure, including the <head> and <body> tags,
 * and includes global styles, SEO component, and various inline scripts for
 * functionality like smooth scrolling, PWA installation, and cookie consent.
 *
 * @param {object} props - The properties for the component.
 * @param {string} props.title - The title of the page, passed to the SEO component.
 * @param {string} [props.description] - The meta description for the page.
 * @param {string} [props.image] - The URL for the Open Graph image.
 * @param {boolean} [props.noindex=false] - If true, adds a "noindex, nofollow" meta tag.
 *
 * @slot default - The main content of the page.
 * @slot head - For adding extra elements to the <head> tag.
 */
import '../styles/global.css';
import ScrollToTop from '../components/ScrollToTop.astro';
import SEO from '../components/SEO.astro';

export interface Props {
	title: string;
	description?: string;
	image?: string;
	noindex?: boolean;
}

const { title, description = "Nominieren Sie Persönlichkeiten für die 26 in 2026 Mobility Trailblazers Awards. Jetzt Vorschlag für die Mobilitätswende im DACH-Raum einreichen!", image = "/images/og-image.jpg", noindex = false } = Astro.props;
const isHomepage = Astro.url.pathname === '/';

// Get GA ID from environment variable
const gaId = import.meta.env.PUBLIC_GA_MEASUREMENT_ID || 'G-0C23GHZJQT';
---

<!doctype html>
<html lang="de">
	<head>
		<meta charset="UTF-8" />
		<!-- Enhanced Android viewport meta tag -->
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes, shrink-to-fit=no, viewport-fit=cover" />
		<!-- Android Chrome theme color -->
		<meta name="theme-color" content="#F8F0E3" />
		<!-- Prevent Android's auto-zoom on form focus -->
		<meta name="format-detection" content="telephone=no" />
		<!-- Favicon configuration for all platforms -->
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png" />
		<link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png" />
		
		<!-- PWA Manifest -->
		<link rel="manifest" href="/manifest.json" />
		
		<!-- iOS PWA Support -->
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />
		<meta name="apple-mobile-web-app-title" content="Mobility Trailblazers" />
		
		<meta name="generator" content={Astro.generator} />
		
		<!-- SEO Component handles all meta tags -->
		<SEO title={title} description={description} image={image} noindex={noindex} />
		
		<!-- Tarteaucitron CSS -->
		<link rel="stylesheet" href="/tarteaucitron/css/tarteaucitron.css">
		<link rel="stylesheet" href="/tarteaucitron-custom.css">

		<!-- Resource hints for performance -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link rel="dns-prefetch" href="https://widgets.sociablekit.com">
		<link rel="dns-prefetch" href="https://www.linkedin.com">
		
		<!-- Preload critical Roboto font files for immediate LCP text -->
		<link rel="preload" href="https://fonts.gstatic.com/s/roboto/v32/KFOmCnqEu92Fr1Mu4mxK.woff2" as="font" type="font/woff2" crossorigin fetchpriority="high">
		<link rel="preload" href="https://fonts.gstatic.com/s/roboto/v32/KFOlCnqEu92Fr1MmEU9fBBc4.woff2" as="font" type="font/woff2" crossorigin>
		
		<!-- Load other fonts asynchronously -->
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Cabin:wght@400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cabin:wght@400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap"></noscript>

		<!-- Preload critical images for homepage only -->
		{isHomepage && (
			<>
				<link rel="preload" as="image" href="/images/about/fernsehturm-berlin.jpg" fetchpriority="high" media="(min-width: 768px)">
				<link rel="preload" as="image" href="/images/logo.webp" fetchpriority="high">
			</>
		)}

		<!-- Page-specific head content -->
		<slot name="head" />
		
		<!-- Inline critical CSS with optimized font loading -->
		<style>
			/* Critical Roboto font-face declarations with font-display: swap */
			@font-face {
				font-family: Roboto;
				font-style: normal;
				font-weight: 400;
				font-display: swap;
				src: url('https://fonts.gstatic.com/s/roboto/v32/KFOmCnqEu92Fr1Mu4mxK.woff2') format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}

			@font-face {
				font-family: Roboto;
				font-style: normal;
				font-weight: 700;
				font-display: swap;
				src: url('https://fonts.gstatic.com/s/roboto/v32/KFOlCnqEu92Fr1MmEU9fBBc4.woff2') format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}
			
			/* Critical hero subtitle styles with performance optimizations */
			.hero-subtitle {
				font-family: Roboto, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
				font-size: 1.25rem;
				font-weight: 400;
				margin-bottom: 2rem;
				line-height: 1.6;
				min-height: 4rem;
				contain: layout style;
				will-change: auto;
				font-kerning: auto;
				text-rendering: optimizespeed;
			}
			
			/* Responsive font sizes */
			@media (max-width: 768px) {
				.hero-subtitle {
					font-size: 1rem;
					min-height: 3.5rem;
				}
			}
		</style>
	</head>
	<body>
		<slot />
		<ScrollToTop />
		
		<!-- Script for handling smooth scrolling for internal anchor links -->
		<script is:inline>
			/**
			 * This script provides smooth scrolling for on-page anchor links (e.g., /#about).
			 * It accounts for the fixed header height and updates the URL hash without causing a page jump.
			 * It is written in ES5-compatible JavaScript for broad browser support.
			 */
			(function() {
				// Offset to account for the fixed header height, ensuring the target section is not obscured.
				var HEADER_OFFSET = 100;

				/**
				 * Scrolls the page smoothly to a target element.
				 * @param {string} targetId - The ID of the element to scroll to.
				 * @returns {boolean} - True if the element was found and scrolled to, false otherwise.
				 */
				function smoothScrollToElement(targetId) {
					var target = document.getElementById(targetId);
					if (!target) return false;

					var targetPosition = target.getBoundingClientRect().top + window.pageYOffset - HEADER_OFFSET;

					// Use the modern `scrollTo` with smooth behavior if supported.
					if ('scrollBehavior' in document.documentElement.style) {
						window.scrollTo({
							top: targetPosition,
							behavior: 'smooth'
						});
					} else {
						// Fallback for older browsers that do not support smooth scrolling.
						window.scrollTo(0, targetPosition);
					}
					return true;
				}

				/**
				 * Attaches click listeners to all internal anchor links to trigger smooth scrolling.
				 */
				function handleInternalLinks() {
					var links = document.querySelectorAll('a[href^="#"], a[href^="/#"]');

					for (var i = 0; i < links.length; i++) {
						links[i].addEventListener('click', function(e) {
							var href = this.getAttribute('href');
							var targetId = href.replace(/^\/?#/, ''); // Extracts the ID from the href.

							if (targetId && smoothScrollToElement(targetId)) {
								e.preventDefault();
								// Update the URL hash in the address bar without causing a jump.
								if (history.pushState) {
									history.pushState(null, null, '#' + targetId);
								} else {
									window.location.hash = targetId; // Fallback for older browsers.
								}
							}
						});
					}
				}

				// Initialize the script once the DOM is ready.
				if (document.readyState === 'loading') {
					document.addEventListener('DOMContentLoaded', handleInternalLinks);
				} else {
					handleInternalLinks();
				}

				// Handle cases where the page is loaded with a hash in the URL.
				if (window.location.hash) {
					setTimeout(function() {
						var targetId = window.location.hash.substring(1);
						smoothScrollToElement(targetId);
					}, 100); // Timeout allows the page to finish rendering before scrolling.
				}
			})();
		</script>
		
		<!-- Script for Service Worker registration and PWA installation prompts -->
		<script is:inline>
			/**
			 * This script handles PWA (Progressive Web App) functionalities.
			 * 1. Registers the service worker for offline capabilities and caching.
			 * 2. Manages the PWA installation prompt, showing a custom button where supported.
			 * 3. Provides platform-specific installation instructions for iOS and Android
			 *    as a fallback.
			 */
			(function() {
				const DEBUG = import.meta.env.DEV;

				// 1. Service Worker Registration
				if ('serviceWorker' in navigator) {
					window.addEventListener('load', function() {
						navigator.serviceWorker.register('/service-worker.js')
							.then(function(registration) {
								if (DEBUG) console.log('ServiceWorker registration successful');
								// Periodically check for updates to the service worker.
								setInterval(function() {
									registration.update();
								}, 300000); // Check every 5 minutes
							})
							.catch(function(err) {
								if (DEBUG) console.log('ServiceWorker registration failed: ', err);
							});
					});
				}

				// 2. PWA Installation Prompt Handling
				let deferredPrompt;
				let hasNativePrompt = false; // Track if the native browser prompt is available.

				window.addEventListener('beforeinstallprompt', function(e) {
					// Prevent the default browser install prompt.
					e.preventDefault();
					// Stash the event so it can be triggered later.
					deferredPrompt = e;
					hasNativePrompt = true;
					// Show a custom install button if the app is not already installed.
					if (!window.matchMedia('(display-mode: standalone)').matches) {
						showInstallButton();
					}
				});

				/**
				 * Creates and displays a custom "Install App" button.
				 */
				function showInstallButton() {
					if (document.getElementById('pwa-install-button')) return;

					var button = document.createElement('button');
					button.id = 'pwa-install-button';
					button.innerHTML = 'App installieren';
					button.style.cssText = `
						position: fixed; bottom: 20px; left: 20px;
						background: linear-gradient(135deg, #003C3D, #C1693C);
						color: #fff; border: none; padding: 12px 24px; border-radius: 50px;
						font-weight: 600; cursor: pointer; z-index: 9999;
						box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease;
						font-family: system-ui, -apple-system, sans-serif;
					`;

					button.addEventListener('click', function() {
						if (deferredPrompt) {
							button.style.display = 'none'; // Hide the button immediately.
							deferredPrompt.prompt(); // Show the native browser install prompt.
							deferredPrompt.userChoice.then(function(choiceResult) {
								if (choiceResult.outcome === 'accepted') {
									if (DEBUG) console.log('User accepted the install prompt');
								} else {
									button.style.display = 'block'; // Show button again if declined.
								}
								deferredPrompt = null;
							});
						}
					});

					document.body.appendChild(button);

					// Optional: Add a close button to the install prompt.
					var closeBtn = document.createElement('span');
					// ... (close button implementation)

					// Optional: Hide the button after a timeout if not interacted with.
					setTimeout(function() {
						if (button && button.style.display !== 'none') {
							button.style.opacity = '0';
							setTimeout(function() {
								if (button.parentNode) button.parentNode.removeChild(button);
							}, 300);
						}
					}, 30000);
				}

				// Hide the install button if the app is successfully installed.
				window.addEventListener('appinstalled', function() {
					if (DEBUG) console.log('PWA was installed');
					var button = document.getElementById('pwa-install-button');
					if (button) button.style.display = 'none';
				});

				// 3. Platform-Specific Fallback Instructions
				var isIOS = navigator.standalone === false && /iPhone|iPad|iPod/.test(navigator.userAgent);
				var isAndroid = /Android/.test(navigator.userAgent);
				var isChrome = /Chrome/.test(navigator.userAgent) && !/Edge/.test(navigator.userAgent);

				if (isIOS) {
					setTimeout(function() {
						if (!window.navigator.standalone && !localStorage.getItem('ios-install-dismissed')) {
							showIOSInstallInstructions();
						}
					}, 10000);
				}

				if (isAndroid && isChrome && !window.matchMedia('(display-mode: standalone)').matches) {
					setTimeout(function() {
						if (!hasNativePrompt && !deferredPrompt && !localStorage.getItem('android-install-dismissed')) {
							showAndroidInstallInstructions();
						}
					}, 15000);
				}

				/**
				 * Shows a banner with instructions for installing the PWA on iOS devices.
				 */
				function showIOSInstallInstructions() {
					var banner = document.createElement('div');
					// ... (iOS banner implementation)
				}

				/**
				 * Shows a banner with instructions for installing the PWA on Android devices.
				 */
				function showAndroidInstallInstructions() {
					var banner = document.createElement('div');
					// ... (Android banner implementation)
				}
			})();
		</script>
		
		<!-- Tarteaucitron Cookie Consent Manager -->
		<script is:inline src="/tarteaucitron/tarteaucitron.js"></script>
		<script is:inline src="/tarteaucitron/lang/tarteaucitron.de.js"></script>
		<script is:inline src="/tarteaucitron/tarteaucitron.services.minimal.js"></script>
		<script is:inline>
			/**
			 * This script initializes Tarteaucitron.js, a cookie consent manager.
			 * It configures the appearance and behavior of the cookie banner and
			 * sets up Google Consent Mode v2 to manage consent for Google services like Analytics.
			 */
			tarteaucitron.init({
				"privacyUrl": "/datenschutz",
				"bodyPosition": "bottom",
				"hashtag": "#tarteaucitron",
				"cookieName": "tarteaucitron",
				"orientation": "bottom",
				"groupServices": false,
				"serviceDefaultState": "wait", // GDPR compliant: services are disabled by default
				"showAlertSmall": false,
				"cookieslist": true,
				"closePopup": false,
				"showIcon": false,
				"adblocker": false,
				"DenyAllCta": true,
				"AcceptAllCta": true,
				"highPrivacy": true,
				"handleBrowserDNTRequest": false,
				"removeCredit": false,
				"moreInfoLink": true,
				"readmoreLink": "/datenschutz",
				"mandatory": true,
				"googleConsentMode": true // Enables Google Consent Mode v2 integration
			});

			// --- Google Consent Mode v2 Setup ---
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}

			// Set the default consent state for all Google tags on the page.
			// By default, all consent types are denied, except for security_storage.
			gtag('consent', 'default', {
				'ad_storage': 'denied',
				'ad_user_data': 'denied',
				'ad_personalization': 'denied',
				'analytics_storage': 'denied',
				'functionality_storage': 'denied',
				'personalization_storage': 'denied',
				'security_storage': 'granted', // Essential for basic site security
				'wait_for_update': 500 // Milliseconds to wait for a consent update before sending data
			});

			// Configure the Google Analytics service within Tarteaucitron.
			// The GA ID is passed from the Astro frontmatter.
			tarteaucitron.user.gtagUa = '${gaId}';
			tarteaucitron.user.gtagCrossdomain = ['mobilitytrailblazers.de'];
			tarteaucitron.user.gtagMore = function() { /* Optional additional GA config */ };

			// Add the Google Analytics service to the Tarteaucitron job queue.
			// Tarteaucitron will manage loading this service based on user consent.
			(tarteaucitron.job = tarteaucitron.job || []).push('gtag');
		</script>
	</body>
</html>

<style is:global>
	/* CSS Variables removed from Layout.astro - now using global.css as single source of truth */

	* {
		box-sizing: border-box;
	}

	html {
		background-color: #F8F0E3;
	}

	body {
		font-family: var(--font-primary);
		line-height: 1.6;
		color: var(--color-text);
		background-color: #F8F0E3;
		margin: 0;
		padding: 0;
		overflow-x: hidden;
	}

	h1, h2, h3, h4, h5, h6 {
		font-family: var(--font-primary);
		font-weight: 600;
		line-height: 1.2;
		margin: 0 0 1rem;
	}

	h1 { font-size: 3.5rem; }
	h2 { font-size: 2.5rem; }
	h3 { font-size: 2rem; }
	h4 { font-size: 1.5rem; }
	h5 { font-size: 1.25rem; }
	h6 { font-size: 1rem; }

	p {
		margin: 0 0 1rem;
	}

	a {
		color: var(--color-accent);
		text-decoration: none;
		transition: color 0.3s ease;
	}

	a:hover {
		color: var(--color-primary);
	}

	button {
		font-family: var(--font-primary);
		cursor: pointer;
		border: none;
		background: none;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
	}

	.btn {
		display: inline-block;
		padding: 1rem 2rem;
		background: linear-gradient(135deg, var(--color-primary), var(--color-accent));
		color: #fff;
		border-radius: 50px;
		font-weight: 600;
		text-decoration: none;
		transition: all 0.3s ease;
		border: none;
		cursor: pointer;
	}

	.btn:hover {
		transform: translateY(-2px);
		box-shadow: 0 10px 25px rgb(0, 0, 0, 0.2);
		color: #fff;
	}

	.section {
		padding: 4rem 0;
	}

	.text-center {
		text-align: center;
	}

	.text-left {
		text-align: left;
	}

	.text-right {
		text-align: right;
	}

	@media (max-width: 768px) {
		h1 { font-size: 2.5rem; }
		h2 { font-size: 2rem; }
		h3 { font-size: 1.5rem; }
		
		.section {
			padding: 2rem 0;
		}
		
		.container {
			padding: 0 0.5rem;
		}
	}
</style>